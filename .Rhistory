crop <- "bean"
# Step 1: Crop area identification
source("01_cwr_id_occurrence_data.R")
system.time(exp = {occ_data <- crop_area_id(crop = crop); rm(crop_area_id)})
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
# loop by crop
crop <- "bean"
# Step 1: Crop area identification
source("01_cwr_id_occurrence_data.R")
system.time(exp = {occ_data <- crop_area_id(crop = crop); rm(crop_area_id)})
View(occ_data)
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(ff)){install.packages('ff'); library(ff)} else {library(ff)})
suppressMessages(if(!require(data.table)){install.packages('data.table'); library(data.table)} else {library(data.table)})
suppressMessages(if(!require(miscTools)){install.packages('miscTools'); library(miscTools)} else {library(miscTools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(foreach)){install.packages('foreach'); library(foreach)} else {library(foreach)})
# suppressMessages(if(!require(doMC)){install.packages('doMC'); library(doMC)} else {library(doMC)})
suppressMessages(if(!require(mgcv)){install.packages('mgcv'); library(mgcv)} else {library(mgcv)})
suppressMessages(if(!require(rasterVis)){install.packages('rasterVis'); library(rasterVis)} else {library(rasterVis)})
suppressMessages(if(!require(stringr)){install.packages('stringr'); library(stringr)} else {library(stringr)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(mapdata)){install.packages('mapdata'); library(mapdata)} else {library(mapdata)})
suppressMessages(if(!require(ggplot2)){install.packages('ggplot2'); library(ggplot2)} else {library(ggplot2)})
suppressMessages(if(!require(corrplot)){install.packages('corrplot'); library(corrplot)} else {library(corrplot)})
suppressMessages(if(!require(FactoMineR)){install.packages('FactoMineR'); library(FactoMineR)} else {library(FactoMineR)})
suppressMessages(if(!require(factoextra)){install.packages('factoextra'); library(factoextra)} else {library(factoextra)})
suppressMessages(if(!require(leaflet)){install.packages('leaflet'); library(leaflet)} else {library(leaflet)})
suppressMessages(if(!require(Rtsne)){install.packages('Rtsne'); library(Rtsne)} else {library(Rtsne)})
suppressMessages(if(!require(readr)){install.packages('readr'); library(readr)} else {library(readr)})
suppressMessages(if(!require(dbscan)){install.packages('dbscan'); library(dbscan)} else {library(dbscan)})
suppressMessages(if(!require(zoom)){install.packages('zoom'); library(zoom)} else {library(zoom)})
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt/workspace_cluster_9" } else {
if(OSys == "Windows"){ root <- "//dapadfs/Workspace_cluster_9" }
}; rm(OSys)
crop_list <- tolower(list.files(path = paste0(root, "/CWR_pre-breeding/Input_data/presence_data"), full.names = F))
ggcmi_lst <- c("Pulses", NA, "Barley", rep("Pulses", 4), NA, "Millet", rep("Pulses", 2), "Millet", "Pulses", "Potatoes", "Rice", "Sorghum", "Sunflower", NA, "Wheat")
if(crop %in% crop_list){
crop_ggcmi <- ggcmi_lst[which(crop_list == crop)]
}
planting_rf_ggcmi <- raster::brick(paste(root, "/CWR_pre-breeding/Input_data/GGCMI-data/", crop_ggcmi, "_rf_growing_season_dates_v1.25.nc4", sep = ""), varname = "planting day")
planting_rf_ggcmi <- planting_rf_ggcmi[[1]]
harvest_rf_ggcmi <- raster::brick(paste(root, "/CWR_pre-breeding/Input_data/GGCMI-data/", crop_ggcmi, "_rf_growing_season_dates_v1.25.nc4", sep = ""), varname = "harvest day")
harvest_rf_ggcmi <- harvest_rf_ggcmi[[1]]
planting <- raster::extract(x = planting_rf_ggcmi, y = occ_data[,c("lon", "lat")])
harvest <- raster::extract(x = harvest_rf_ggcmi, y = occ_data[,c("lon", "lat")])
occ_data <- cbind(occ_data, planting, harvest); rm(planting, harvest, planting_rf_ggcmi, harvest_rf_ggcmi)
occ_data$planting[which(occ_data$planting == "-99")] <- NA
occ_data$harvest[which(occ_data$harvest == "-99")] <- NA
if(!file.exists(paste(root, "/CWR_pre-breeding/Input_data/precense_data/",crop_ggcmi,"/plots/summary_of_missing_data_/",crop_ggcmi," .png"))){
## Proporcion de NA
total <-  length(occ_data$planting)
x <- sum(is.na(occ_data$planting) & !is.na(occ_data$harvest))/total
y <- sum(!is.na(occ_data$planting) & is.na(occ_data$harvest))/total
z <- sum(is.na(occ_data$planting) & is.na(occ_data$harvest))/total
df <- data.frame(trt = c('Planting','Harvest','Planting & Harvest'), outcome= c(x,y,z))
gg <- ggplot(df, aes(trt, outcome)) +geom_col()
gg <- gg + labs(title="Summary of Missing Data", y="Proportion of Na", x= "Variables")
gg
rm(x,y,z,total,df,gg)
}
occ_data <- occ_data[complete.cases(occ_data),]; rownames(occ_data) <- 1:nrow(occ_data)
occ_data$cycle_length <- abs(occ_data$harvest - occ_data$planting)
occ_data$condition  <- NA
occ_data$condition[which((occ_data$harvest - occ_data$planting)> 0)] <- "One year"
occ_data$condition[which((occ_data$harvest - occ_data$planting)< 0)] <- "Two years"
head(occ_data)
write.csv(occ_data, file(paste0(root, "/CWR_pre-breeding/Input_data/presence_data/Potato/database/occ_data_full.csv")))
str_to_title(crop)
write.csv(occ_data, file(paste0(root, "/CWR_pre-breeding/Input_data/presence_data/", str_to_title(crop), "/database/occ_data_full.csv")))
View(occ_data)
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(ff)){install.packages('ff'); library(ff)} else {library(ff)})
suppressMessages(if(!require(data.table)){install.packages('data.table'); library(data.table)} else {library(data.table)})
suppressMessages(if(!require(miscTools)){install.packages('miscTools'); library(miscTools)} else {library(miscTools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(foreach)){install.packages('foreach'); library(foreach)} else {library(foreach)})
suppressMessages(if(!require(mgcv)){install.packages('mgcv'); library(mgcv)} else {library(mgcv)})
suppressMessages(if(!require(rasterVis)){install.packages('rasterVis'); library(rasterVis)} else {library(rasterVis)})
suppressMessages(if(!require(stringr)){install.packages('stringr'); library(stringr)} else {library(stringr)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(mapdata)){install.packages('mapdata'); library(mapdata)} else {library(mapdata)})
suppressMessages(if(!require(ggplot2)){install.packages('ggplot2'); library(ggplot2)} else {library(ggplot2)})
suppressMessages(if(!require(FactoMineR)){install.packages('FactoMineR'); library(FactoMineR)} else {library(FactoMineR)})
suppressMessages(if(!require(FactoClass)){install.packages('FactoClass'); library(FactoClass)} else {library(FactoClass)})
suppressMessages(if(!require(ade4)){install.packages('ade4'); library(ade4)} else {library(ade4)})
suppressMessages(if(!require(xtable)){install.packages('xtable'); library(xtable)} else {library(xtable)})
suppressMessages(if(!require(ggdendro)){install.packages('ggdendro'); library(ggdendro)} else {library(ggdendro)})
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt/workspace_cluster_9" } else {
if(OSys == "Windows"){ root <- "//dapadfs/Workspace_cluster_9" }
}; rm(OSys)
base <- raster::stack("//dapadfs/data_cluster_5/cropdata/agmerra/daily/nc-files/srad_daily_ts_agmerra_1980_2010.nc")
base <- base[[1]]
base <- rotate(base)
base <- raster::stack("//dapadfs/data_cluster_5/cropdata/agmerra/daily/nc-files/srad_daily_ts_agmerra_1980_2010.nc")
base <- raster::stack("//dapadfs/data_cluster_5/cropdata/agmerra/daily/nc-files/srad_daily_ts_agmerra_1980_2010.nc")
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
crop <- "bean"
source("01_cwr_id_occurrence_data.R")
system.time(exp = {occ_data <- crop_area_id(crop = crop); rm(crop_area_id)})
source("02_cwr_id_crop_growing_cycle.R")
system.time(exp = {occ_data <- crop_cycle_id(crop = crop, occ_data = occ_data); rm(crop_cycle_id)})
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(ff)){install.packages('ff'); library(ff)} else {library(ff)})
suppressMessages(if(!require(data.table)){install.packages('data.table'); library(data.table)} else {library(data.table)})
suppressMessages(if(!require(miscTools)){install.packages('miscTools'); library(miscTools)} else {library(miscTools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(foreach)){install.packages('foreach'); library(foreach)} else {library(foreach)})
suppressMessages(if(!require(mgcv)){install.packages('mgcv'); library(mgcv)} else {library(mgcv)})
suppressMessages(if(!require(rasterVis)){install.packages('rasterVis'); library(rasterVis)} else {library(rasterVis)})
suppressMessages(if(!require(stringr)){install.packages('stringr'); library(stringr)} else {library(stringr)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(mapdata)){install.packages('mapdata'); library(mapdata)} else {library(mapdata)})
suppressMessages(if(!require(ggplot2)){install.packages('ggplot2'); library(ggplot2)} else {library(ggplot2)})
suppressMessages(if(!require(FactoMineR)){install.packages('FactoMineR'); library(FactoMineR)} else {library(FactoMineR)})
suppressMessages(if(!require(FactoClass)){install.packages('FactoClass'); library(FactoClass)} else {library(FactoClass)})
suppressMessages(if(!require(ade4)){install.packages('ade4'); library(ade4)} else {library(ade4)})
suppressMessages(if(!require(xtable)){install.packages('xtable'); library(xtable)} else {library(xtable)})
suppressMessages(if(!require(ggdendro)){install.packages('ggdendro'); library(ggdendro)} else {library(ggdendro)})
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){ root <- "/mnt/workspace_cluster_9" } else {
if(OSys == "Windows"){ root <- "//dapadfs/Workspace_cluster_9" }
}; rm(OSys)
base <- raster::stack("//dapadfs/data_cluster_5/cropdata/agmerra/daily/nc-files/srad_daily_ts_agmerra_1980_2010.nc")
base <- base[[1]]
base <- rotate(base)
countries <- rgdal::readOGR(dsn = paste0(root, "/CWR_pre-breeding/Input_data/world_shape"), "all_countries")
countries$COUNTRY <- iconv(countries$COUNTRY, from = "UTF-8", to = "latin1")
countries[countries@data$COUNTRY=="Colombia",]
View(countries@data)
countries[countries@data$COUNTRY=="Colombia" & countries@data$UNREG1 == "Central America" & countries@data$UNREG1 == "Caribbean",]
central_america_colombia <- countries[countries@data$COUNTRY=="Colombia" & countries@data$UNREG1 == "Central America" & countries@data$UNREG1 == "Caribbean",]
plot(central_america_colombia)
central_america_colombia
central_america_colombia@data
central_america_colombia <- countries[countries@data$COUNTRY == "Colombia" & countries@data$UNREG1 == "Central America" | countries@data$UNREG1 == "Caribbean",]
plot(central_america_colombia)
central_america_colombia <- countries[countries@data$COUNTRY == "Colombia" & (countries@data$UNREG1 == "Central America" | countries@data$UNREG1 == "Caribbean"),]
central_america_colombia <- countries[countries@data$COUNTRY == "Colombia" & countries@data$UNREG1 == "Central America",]
central_america_colombia <- countries[countries@data$COUNTRY == "Colombia" | countries@data$UNREG1 == "Central America",]
plot(central_america_colombia)
central_america_colombia <- countries[countries@data$COUNTRY == "Colombia" | countries@data$UNREG1 == "Central America" | countries@data$UNREG1 == "Caribbean",]
plot(central_america_colombia)
extent(central_america_colombia)
prec <- readRDS("D:/prec_CACol.rds")
prec[1:5,(ncol(prec)-5):ncol(prec)]
prec$bean_coordinates <- NULL
# Planting dates
planting_rf_ggcmi <- raster::brick(paste("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Input_data/GGCMI-data/Pulses_rf_growing_season_dates_v1.25.nc4", sep = ""), varname = "planting day")
planting_rf_ggcmi <- planting_rf_ggcmi[[1]]
# Harversting dates
harvest_rf_ggcmi <- raster::brick(paste("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Input_data/GGCMI-data/Pulses_rf_growing_season_dates_v1.25.nc4", sep = ""), varname = "harvest day")
harvest_rf_ggcmi <- harvest_rf_ggcmi[[1]]
prec$Planting <- raster::extract(x = planting_rf_ggcmi, y = prec[,c("lon", "lat")])
prec$Harvest  <- raster::extract(x = harvest_rf_ggcmi, y = prec[,c("lon", "lat")])
prec[1:5,(ncol(prec)-5):ncol(prec)]
prec$Duration <- ifelse(test = prec$Planting < prec$Harvest, yes = "One year", no = "Two years")
prec[1:5,(ncol(prec)-5):ncol(prec)]
hist(prec$Planting)
hist(prec$Harvest)
summary(prec$Planting)
summary(prec$Harvest)
table(prec$Duration)
prec[1:5,(ncol(prec)-5):ncol(prec)]
1:(ncol(prec) - 3)
(ncol(prec) - 3)
time.serie <- prec[i, 1:(ncol(prec)-3)]
i=1
duration <- prec$Duration[i]
start <- prec$Planting[i]
end <- prec$Harvest[i]
duration
start
end
time.serie <- prec[i, 1:(ncol(prec)-3)]
View(time.serie)
time.serie
time.serie[,1:5]
X <- time.serie
X <- X %>% gather(key = Date, value = Value, -(cellID:lat))
View(X)
X$Year <- lubridate::year(as.Date(X$Date))
X$Yday <- lubridate::yday(as.Date(X$Date))
View(X)
X <- X %>% group_by(Year) %>% dplyr::filter(Yday >= start & Yday <= end)
View(X)
totrain <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(TOTRAIN = sum(Value))
totrain
totrain %>% ggplot() + theme_tufte() + geom_line(aes(x = Year, y = TOTRAIN)) + scale_x_continuous(breaks = 1981:2010) + theme(axis.text.x = element_text(angle = 45))
totrain %>% ggplot() + theme_bw() + geom_line(aes(x = Year, y = TOTRAIN)) + scale_x_continuous(breaks = 1981:2010) + theme(axis.text.x = element_text(angle = 45))
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
suppressMessages(if(!require(compiler)){install.packages('compiler'); library(compiler)} else {library(compiler)})
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
cdd <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(CDD = dr_stressCMP(Value, p_thresh = 1))
plot(cdd)
plot(cdd, ty = "l")
run_avg <- function(x){
z <- caTools::runmean(x, k = 5, endrule = 'NA')
z <- max(z, na.rm = TRUE)
return(z)
}
p5d <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P5D = run_avg(x = Value))
plot(p5d, ty = "l")
p_95 <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P_95 = quantile(Value, probs = .95, na.rm = TRUE))
plot(p_95, ty = "l")
calculations <- function(time.serie, start, end){
X <- time.serie
X <- X %>% gather(key = Date, value = Value, -(cellID:lat))
X$Year <- lubridate::year(as.Date(X$Date))
X$Yday <- lubridate::yday(as.Date(X$Date))
X <- X %>% group_by(Year) %>% dplyr::filter(Yday >= start & Yday <= end)
# Total precipitation
totrain <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(TOTRAIN = sum(Value))
# Drought spell: Maximum number of consecutive dry days (i.e. with precipitation < 1 mm day-1)
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
cdd <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(CDD = dr_stressCMP(Value, p_thresh = 1))
# Flooding: Maximum 5-day running average precipitation
run_avg <- function(x){
z <- caTools::runmean(x, k = 5, endrule = 'NA')
z <- max(z, na.rm = TRUE)
return(z)
}
p5d <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P5D = run_avg(x = Value))
# Erosion risk: 95th percentile of daily precipitation
p_95 <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P_95 = quantile(Value, probs = .95, na.rm = TRUE))
return(list(totrain = totrain, cdd = cdd, p5d = p5d, p_95 = p_95))
}
results <- calculations(time.serie = time.serie, start = start, end = end)
results
totrain
totrain <- totrain %>% as.data.frame
totrain
rbind(totrain, cdd, p5d, p_95)
totrain <- totrain %>% as.data.frame
names(totrain)[2] <- "Value"; totrain$Variable <- "TOTRAIN"
cdd <- cdd %>% as.data.frame
names(cdd)[2] <- "Value"; cdd$Variable <- "CDD"
p5d <- p5d %>% as.data.frame
names(p5d)[2] <- "Value"; p5d$Variable <- "P5D"
p_95 <- p_95 %>% as.data.frame
names(p_95)[2] <- "Value"; p_95$Variable <- "P_95"
rbind(totrain, cdd, p5d, p_95)
TEST <- lapply(1:nrow(prec), function(i){
duration <- prec$Duration[i]
start <- prec$Planting[i]
end <- prec$Harvest[i]
time.serie <- prec[i, 1:(ncol(prec)-3)]
if(duration == "One year"){
calculations <- function(time.serie, start, end){
X <- time.serie
X <- X %>% gather(key = Date, value = Value, -(cellID:lat))
X$Year <- lubridate::year(as.Date(X$Date))
X$Yday <- lubridate::yday(as.Date(X$Date))
X <- X %>% group_by(Year) %>% dplyr::filter(Yday >= start & Yday <= end)
# Total precipitation
totrain <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(TOTRAIN = sum(Value))
totrain <- totrain %>% as.data.frame
names(totrain)[2] <- "Value"; totrain$Variable <- "TOTRAIN"
# Drought spell: Maximum number of consecutive dry days (i.e. with precipitation < 1 mm day-1)
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
cdd <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(CDD = dr_stressCMP(Value, p_thresh = 1))
cdd <- cdd %>% as.data.frame
names(cdd)[2] <- "Value"; cdd$Variable <- "CDD"
# Flooding: Maximum 5-day running average precipitation
run_avg <- function(x){
z <- caTools::runmean(x, k = 5, endrule = 'NA')
z <- max(z, na.rm = TRUE)
return(z)
}
p5d <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P5D = run_avg(x = Value))
p5d <- p5d %>% as.data.frame
names(p5d)[2] <- "Value"; p5d$Variable <- "P5D"
# Erosion risk: 95th percentile of daily precipitation
p_95 <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P_95 = quantile(Value, probs = .95, na.rm = TRUE))
p_95 <- p_95 %>% as.data.frame
names(p_95)[2] <- "Value"; p_95$Variable <- "P_95"
return(rbind(totrain, cdd, p5d, p_95))
}
results <- calculations(time.serie = time.serie, start = start, end = end)
}
return(results)
})
TEST <- lapply(1:nrow(prec), function(i){
duration <- prec$Duration[i]
start <- prec$Planting[i]
end <- prec$Harvest[i]
time.serie <- prec[i, 1:(ncol(prec)-3)]
if(duration == "One year"){
calculations <- function(time.serie, start, end){
X <- time.serie
X <- X %>% gather(key = Date, value = Value, -(cellID:lat))
X$Year <- lubridate::year(as.Date(X$Date))
X$Yday <- lubridate::yday(as.Date(X$Date))
X <- X %>% group_by(Year) %>% dplyr::filter(Yday >= start & Yday <= end)
# Total precipitation
totrain <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(TOTRAIN = sum(Value))
totrain <- totrain %>% as.data.frame
names(totrain)[2] <- "Value"; totrain$Variable <- "TOTRAIN"
# Drought spell: Maximum number of consecutive dry days (i.e. with precipitation < 1 mm day-1)
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
cdd <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(CDD = dr_stressCMP(Value, p_thresh = 1))
cdd <- cdd %>% as.data.frame
names(cdd)[2] <- "Value"; cdd$Variable <- "CDD"
# Flooding: Maximum 5-day running average precipitation
run_avg <- function(x){
z <- caTools::runmean(x, k = 5, endrule = 'NA')
z <- max(z, na.rm = TRUE)
return(z)
}
p5d <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P5D = run_avg(x = Value))
p5d <- p5d %>% as.data.frame
names(p5d)[2] <- "Value"; p5d$Variable <- "P5D"
# Erosion risk: 95th percentile of daily precipitation
p_95 <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P_95 = quantile(Value, probs = .95, na.rm = TRUE))
p_95 <- p_95 %>% as.data.frame
names(p_95)[2] <- "Value"; p_95$Variable <- "P_95"
return(data.frame(cellID = unique(X$cellID), rbind(totrain, cdd, p5d, p_95)))
}
results <- calculations(time.serie = time.serie, start = start, end = end)
}
return(results)
})
saveRDS(object = prec, file = "D:/precipitation.rds")
plot(prec[,c("lon", "lat")], pch = 20)
prec <- readRDS("D:/precipitation.rds")
plot(prec[,c("lon", "lat")])
View(prec)
prec[1:5,(ncol(prec)-5):ncol(prec)]
table(prec$Duration)
i=1
duration <- prec$Duration[i]
start <- prec$Planting[i]
end <- prec$Harvest[i]
duration
start
end
time.serie <- prec[i, 1:(ncol(prec)-3)]
time.serie
time.serie[,1:5]
X <- time.serie
X <- X %>% gather(key = Date, value = Value, -(cellID:lat))
library(tidyverse)
X <- X %>% gather(key = Date, value = Value, -(cellID:lat))
View(X)
X$Year <- lubridate::year(as.Date(X$Date))
X$Yday <- lubridate::yday(as.Date(X$Date))
X <- X %>% group_by(Year) %>% dplyr::filter(Yday >= start & Yday <= end)
totrain <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(TOTRAIN = sum(Value))
totrain <- totrain %>% as.data.frame
totrain
plot(totrain, ty = 'l')
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
cdd <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(CDD = dr_stressCMP(Value, p_thresh = 1))
cdd <- cdd %>% as.data.frame
library(compiler)
dr_stress <- function(PREC, p_thresh = 1){
runs <- rle(PREC < p_thresh)
cons_days <- max(runs$lengths[runs$values==1], na.rm=TRUE)
return(cons_days)
}
dr_stressCMP <- cmpfun(dr_stress); rm(dr_stress)
cdd <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(CDD = dr_stressCMP(Value, p_thresh = 1))
cdd <- cdd %>% as.data.frame
plot(cd, ty = 'l')
plot(cdd, ty = 'l')
run_avg <- function(x){
z <- caTools::runmean(x, k = 5, endrule = 'NA')
z <- max(z, na.rm = TRUE)
return(z)
}
p5d <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P5D = run_avg(x = Value))
p5d <- p5d %>% as.data.frame
plot(p5d, ty = 'l')
p_95 <- X %>% dplyr::group_by(Year) %>% dplyr::arrange(Date) %>% summarise(P_95 = quantile(Value, probs = .95, na.rm = TRUE))
p_95 <- p_95 %>% as.data.frame
names(p_95)[2] <- "Value"; p_95$Variable <- "P_95"
plot(p_95, ty = "l")
View(p_95)
plot(p_95[,1:2], ty = "l")
table(prec$Duration)
table(prec$Duration)/4590
table(prec$Duration)/4931
View(prec)
View(prec[prec$Duration == "Two years",])
-9.987535e-01
-9.987535e-02
-9.987535e-02
5.752047e+00
-9.987535e-02
-4.069580e-01
-2.896928e+00
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(ff)){install.packages('ff'); library(ff)} else {library(ff)})
suppressMessages(if(!require(data.table)){install.packages('data.table'); library(data.table)} else {library(data.table)})
suppressMessages(if(!require(miscTools)){install.packages('miscTools'); library(miscTools)} else {library(miscTools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(foreach)){install.packages('foreach'); library(foreach)} else {library(foreach)})
suppressMessages(if(!require(mgcv)){install.packages('mgcv'); library(mgcv)} else {library(mgcv)})
suppressMessages(if(!require(rasterVis)){install.packages('rasterVis'); library(rasterVis)} else {library(rasterVis)})
suppressMessages(if(!require(stringr)){install.packages('stringr'); library(stringr)} else {library(stringr)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(mapdata)){install.packages('mapdata'); library(mapdata)} else {library(mapdata)})
suppressMessages(if(!require(FactoMineR)){install.packages('FactoMineR'); library(FactoMineR)} else {library(FactoMineR)})
suppressMessages(if(!require(FactoClass)){install.packages('FactoClass'); library(FactoClass)} else {library(FactoClass)})
suppressMessages(if(!require(ade4)){install.packages('ade4'); library(ade4)} else {library(ade4)})
suppressMessages(if(!require(xtable)){install.packages('xtable'); library(xtable)} else {library(xtable)})
suppressMessages(if(!require(ggdendro)){install.packages('ggdendro'); library(ggdendro)} else {library(ggdendro)})
suppressMessages(if(!require(compiler)){install.packages('compiler'); library(compiler)} else {library(compiler)})
suppressMessages(if(!require(ggthemes)){install.packages('ggthemes'); library(ggthemes)} else {library(ggthemes)})
suppressMessages(if(!require(dtwclust)){install.packages('dtwclust'); library(dtwclust)} else {library(dtwclust)})
suppressMessages(if(!require(cluster)){install.packages('cluster'); library(cluster)} else {library(cluster)})
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){
root <- "/mnt/workspace_cluster_9"
base <- readRDS(paste0(root, "/CWR_pre-breeding/Input_data/AgMerra_template.RDS"))
} else {
if(OSys == "Windows"){
root <- "//dapadfs/Workspace_cluster_9"
base <- readRDS(paste0(root, "/CWR_pre-breeding/Input_data/AgMerra_template.RDS"))
}
}; rm(OSys)
plot(base)
2010-1981
?save
load("//dapadfs/workspace_cluster_8/Kenya_KACCAL/data/bc_quantile_0_05deg_lat/bcc_csm1_1/2021_2045/rcp60/Machakos/tmax/bc_qmap_tmax_2021_2045.RData")
dim(gcmFutBC)
suppressMessages(library(tidyverse))
final.coordinates <- read.csv("~/KenyaMatrixCrop_rainfed.csv", row.names = 1)
final.coordinates <- read.csv("~/KenyaMatrixCrop_rainfed.csv")
View(final.coordinates)
soil.coordinates <- read.table(file = "//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/02-Soil-data/data_hc3ksol_5m_global.txt", header = T)
soil.coordinates <- soil.coordinates %>% dplyr::group_by(CELL5M) %>% dplyr::arrange(-SharePct)
soil.raster <- raster::raster("//dapadfs/workspace_cluster_3/bid-cc-agricultural-sector/02-Soil-data/cell5m.asc")
cellID <- raster::cellFromXY(object = soil.raster, xy = final.coordinates)
cellID <- raster::cellFromXY(object = soil.raster, xy = final.coordinates[,c("x", "y")])
soil.coordinates.filtered <- soil.coordinates[na.omit(match(cellID, soil.coordinates$CELL5M)),]; rownames(soil.coordinates.filtered) <- 1:nrow(soil.coordinates.filtered)
names(soil.coordinates.filtered)[1] <- "CELL30M"
rm(cellID, soil.raster)
View(soil.coordinates.filtered)
length(unique(soil.coordinates.filtered$CELL30M))
View(soil.coordinates.filtered)
sourceCpp("fastPdist.cpp") # Pairwise Euclidean distance function in C++
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(ff)){install.packages('ff'); library(ff)} else {library(ff)})
suppressMessages(if(!require(data.table)){install.packages('data.table'); library(data.table)} else {library(data.table)})
suppressMessages(if(!require(miscTools)){install.packages('miscTools'); library(miscTools)} else {library(miscTools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(foreach)){install.packages('foreach'); library(foreach)} else {library(foreach)})
suppressMessages(if(!require(mgcv)){install.packages('mgcv'); library(mgcv)} else {library(mgcv)})
suppressMessages(if(!require(rasterVis)){install.packages('rasterVis'); library(rasterVis)} else {library(rasterVis)})
suppressMessages(if(!require(stringr)){install.packages('stringr'); library(stringr)} else {library(stringr)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(mapdata)){install.packages('mapdata'); library(mapdata)} else {library(mapdata)})
suppressMessages(if(!require(FactoMineR)){install.packages('FactoMineR'); library(FactoMineR)} else {library(FactoMineR)})
suppressMessages(if(!require(FactoClass)){install.packages('FactoClass'); library(FactoClass)} else {library(FactoClass)})
suppressMessages(if(!require(ade4)){install.packages('ade4'); library(ade4)} else {library(ade4)})
suppressMessages(if(!require(xtable)){install.packages('xtable'); library(xtable)} else {library(xtable)})
suppressMessages(if(!require(ggdendro)){install.packages('ggdendro'); library(ggdendro)} else {library(ggdendro)})
suppressMessages(if(!require(compiler)){install.packages('compiler'); library(compiler)} else {library(compiler)})
suppressMessages(if(!require(ggthemes)){install.packages('ggthemes'); library(ggthemes)} else {library(ggthemes)})
suppressMessages(if(!require(dtwclust)){install.packages('dtwclust'); library(dtwclust)} else {library(dtwclust)})
suppressMessages(if(!require(cluster)){install.packages('cluster'); library(cluster)} else {library(cluster)})
sourceCpp("fastPdist.cpp") # Pairwise Euclidean distance function in C++
library(Rcpp)
library(RcppArmadillo)
sourceCpp("fastPdist.cpp") # Pairwise Euclidean distance function in C++
library("RcppEigen", lib.loc="~/R/win-library/3.4")
library("RcppRoll", lib.loc="~/R/win-library/3.4")
library("bindrcpp", lib.loc="~/R/win-library/3.4")
sourceCpp("fastPdist.cpp") # Pairwise Euclidean distance function in C++
