'Baringo', 'Laikipia', 'Tharaka', 'Lamu', 'Marsabit', 'Isiolo', 'Wajir', 'Mandera'))
countyList$Cluster <- as.character(countyList$Cluster)
countyList$County <- as.character(countyList$County)
countyList <- countyList[1,]
countyList
county='Bomet', season='first'
county='Bomet'; season='first'
cat('\n\n\n*** Processing:', gsub(pattern=' ', replacement='_', county, fixed=TRUE), 'county ***\n\n')
countyDir <- paste(inputDir, '/', gsub(pattern=' ', replacement='_', county, fixed=TRUE), sep='')
inputDir <- '//dapadfs/workspace_cluster_12/Kenya_KACCAL/data/input_tables'
outputDir <- '//dapadfs/workspace_cluster_12/Kenya_KACCAL/results/climatic_indices/historical'
seasonList <- c('first', 'second')
cat('\n\n\n*** Processing:', gsub(pattern=' ', replacement='_', county, fixed=TRUE), 'county ***\n\n')
countyDir <- paste(inputDir, '/', gsub(pattern=' ', replacement='_', county, fixed=TRUE), sep='')
dir.exists(countyDir)
indexes <- paste(outputDir, '/', season, '_season/', gsub(pattern=' ', replacement='_', county, fixed=TRUE), '_', season, '_season_2015.RData', sep='')
indexes
cat('Loading raster mask for:', gsub(pattern=' ', replacement='_', county), '\n')
countyMask <- raster(paste("//dapadfs/workspace_cluster_12/Kenya_KACCAL/data/Kenya_counties_rst/", gsub(pattern=' ', replacement='_', county), "_base.tif", sep=""))
cat('Loading: Solar radiation for first wet season\n')
if(season == 'first'){
load(paste(countyDir, '/dswrf/dswrf_fs_wet_days.RData', sep=''))
dswrf <- first_season_var; rm(first_season_var)
} else {
if(season == 'second'){
load(paste(countyDir, '/dswrf/dswrf_ss_wet_days.RData', sep=''))
dswrf <- second_season_var; rm(second_season_var)
}
}
dswrf <- dswrf[years_analysis]
dswrf <- lapply(1:length(dswrf), function(i){z <- as.data.frame(dswrf[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(dswrf)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(dswrf) <- years_analysis
dswrf <- reshape::merge_recurse(dswrf)
years_analysis <- paste('y', 1981:2005, sep='')
if(season == 'first'){
load(paste(countyDir, '/dswrf/dswrf_fs_wet_days.RData', sep=''))
dswrf <- first_season_var; rm(first_season_var)
} else {
if(season == 'second'){
load(paste(countyDir, '/dswrf/dswrf_ss_wet_days.RData', sep=''))
dswrf <- second_season_var; rm(second_season_var)
}
}
dswrf <- dswrf[years_analysis]
dswrf <- lapply(1:length(dswrf), function(i){z <- as.data.frame(dswrf[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(dswrf)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(dswrf) <- years_analysis
dswrf <- reshape::merge_recurse(dswrf)
if(season == 'first'){
load(paste(countyDir, '/prec/prec_fs_wet_days.RData', sep=''))
prec <- chirps_wet_days; rm(chirps_wet_days)
} else {
if(season == 'second'){
load(paste(countyDir, '/prec/prec_ss_wet_days.RData', sep=''))
prec <- chirps_wet_days; rm(chirps_wet_days)
}
}
years_prec <- gsub(pattern='y', replacement='', names(prec))
# prec <- prec[years_analysis]
prec <- lapply(1:length(prec), function(i){z <- as.data.frame(prec[[i]]); yr <- as.numeric(gsub(pattern='y', replacement='', x=names(prec)[i])); names(z)[4:length(names(z))] <- as.character(seq(as.Date(paste(yr, '-01-01', sep='')), as.Date(paste(yr, '-12-31', sep='')), by=1)); return(z)})
names(prec) <- years_analysis
prec <- reshape::merge_recurse(prec)
load(paste(countyDir, '/soil/soil_data.RData', sep=''))
soil <- soil_data_county; rm(soil_data_county)
soil <- soil[,c("cellID","lon.x","lat.x","id_coarse","rdepth","d.25","d.100","d.225","d.450","d.800","d.1500","soilcp")]
names(soil)[2:3] <- c('lon','lat')
View(soil)
library(ggplot2)
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw()
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = terrain.colors(10))
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = viridis)
library(viridisLite)
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = viridis)
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = "viridis")
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = viridis())
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = vir)
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = "vir")
ggplot(data = soil, aes(x = lon, y = lat, fill = soilcp)) +
geom_raster() +
coord_equal() +
theme_bw() + scale_fill_gradientn(colours = inferno(256))
library("GSIF", lib.loc="~/R/win-library/3.4")
demo("GSIF")
install.packages(c("extraDistr", "glmnet"))
install.packages("corpcor")
library(dtwSat)
install.packages(c("extraDistr", "glmnet"))
library(bfastSpatial )
install.packages("bfastSpatial")
library(devtools)
install_github('loicdtx/bfastSpatial')
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(ff)){install.packages('ff'); library(ff)} else {library(ff)})
suppressMessages(if(!require(data.table)){install.packages('data.table'); library(data.table)} else {library(data.table)})
suppressMessages(if(!require(miscTools)){install.packages('miscTools'); library(miscTools)} else {library(miscTools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(foreach)){install.packages('foreach'); library(foreach)} else {library(foreach)})
suppressMessages(if(!require(mgcv)){install.packages('mgcv'); library(mgcv)} else {library(mgcv)})
suppressMessages(if(!require(rasterVis)){install.packages('rasterVis'); library(rasterVis)} else {library(rasterVis)})
suppressMessages(if(!require(stringr)){install.packages('stringr'); library(stringr)} else {library(stringr)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(mapdata)){install.packages('mapdata'); library(mapdata)} else {library(mapdata)})
suppressMessages(if(!require(FactoMineR)){install.packages('FactoMineR'); library(FactoMineR)} else {library(FactoMineR)})
suppressMessages(if(!require(FactoClass)){install.packages('FactoClass'); library(FactoClass)} else {library(FactoClass)})
suppressMessages(if(!require(ade4)){install.packages('ade4'); library(ade4)} else {library(ade4)})
suppressMessages(if(!require(xtable)){install.packages('xtable'); library(xtable)} else {library(xtable)})
suppressMessages(if(!require(ggdendro)){install.packages('ggdendro'); library(ggdendro)} else {library(ggdendro)})
suppressMessages(if(!require(compiler)){install.packages('compiler'); library(compiler)} else {library(compiler)})
suppressMessages(if(!require(ggthemes)){install.packages('ggthemes'); library(ggthemes)} else {library(ggthemes)})
#suppressMessages(if(!require(dtwclust)){install.packages('dtwclust'); library(dtwclust)} else {library(dtwclust)})
suppressMessages(if(!require(cluster)){install.packages('cluster'); library(cluster)} else {library(cluster)})
OSys <- Sys.info(); OSys <- OSys[names(OSys)=="sysname"]
if(OSys == "Linux"){
root <- "/mnt/workspace_cluster_9"
base <- readRDS(paste0(root, "/CWR_pre-breeding/Input_data/AgMerra_template.RDS"))
} else {
if(OSys == "Windows"){
root <- "//dapadfs/Workspace_cluster_9"
base <- readRDS(paste0(root, "/CWR_pre-breeding/Input_data/AgMerra_template.RDS"))
}
}; rm(OSys)
planting_rf_ggcmi <- raster::brick(paste0(root, "/CWR_pre-breeding/Input_data/GGCMI-data/Pulses_rf_growing_season_dates_v1.25.nc4", sep = ""), varname = "planting day")
planting_rf_ggcmi <- planting_rf_ggcmi[[1]]
# Harversting dates
harvest_rf_ggcmi <- raster::brick(paste0(root, "/CWR_pre-breeding/Input_data/GGCMI-data/Pulses_rf_growing_season_dates_v1.25.nc4", sep = ""), varname = "harvest day")
harvest_rf_ggcmi <- harvest_rf_ggcmi[[1]]
library(raster)
r <- raster::stack("//ccafsserver.cgiarad.org/data_climatewizard/AR5_Global_Daily_25k/pr_day_BCSD_historical_r1i1p1_ACCESS1-0_1962.nc")
r
plot(r[[1]])
r <- raster::stack("//ccafsserver.cgiarad.org/data_climatewizard/AR5_Global_Daily_25k/pr_day_BCSD_rcp45_r1i1p1_CCSM4_2063.nc")
r
plot(r[[1]])
rm(r)
?quantile
r <- raster(ncol=100, nrow=100)
r[] <- rnorm(ncell(r), 0, 50)
quantile(r)
plot(er)
plot(r)
quantile(r, probs = c(0.25, 0.75), type=7,names = FALSE)
?raster::calc
r <- raster(ncols=36, nrows=18)
r[] <- 1:ncell(r)
plot(r)
r2 <- raster(ncols=36, nrows=18)
r2[] <- 1:ncell(r2)
r2[50:69] <- NA
plot(r2)
rStack <- stack(r, r2)
raster::calc(rStack, fun = function(x, y){y-x})
raster::calc(rStack, fun = function(x, y){return(y-x)})
?raster::overlay()
?raster::overlay
r3 <- overlay(r, r2, fun=function(x,y){return(y-x)})
plot(r3)
r3 <- overlay(r, r2, fun=function(x,y){return(na.omit(y)-na.omit(x))})
r3 <- overlay(r, r2, fun=function(x,y){x[which(is.na(x))] <- 0; y[which(is.na(y))] <- 0; z <- y-x; return(z)})
plot(r3)
?scale_fill_distiller
library(ggplot2)
?scale_fill_distiller
?mask
source('~/.active-rstudio-document', echo=TRUE)
library(raster)
library(rgadal)
library(rgdal)
tmin <- raster::stack("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/input_tables/agmerra_tmin/tmin_filtered_europa.rds")
tmin <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/input_tables/agmerra_tmin/tmin_filtered_europa.rds")
plot(tmin$lon, tmin$lat)
tmax <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/input_tables/agmerra_tmax/tmax_filtered_europa.rds")
plot(tmax$lon, tmax$lat)
plot(tmin$lon, tmin$lat)
plot(tmax$lon, tmax$lat)
prec <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/input_tables/chirps/prec_filtered_europa.rds")
plot(prec$lon, prec$lat)
prec <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/input_tables/chirps/prec_filtered_europa.rds")
plot(tmax$lon, tmax$lat)
plot(prec$lon, prec$lat)
# R options
options(warn = -1); options(scipen = 999); g <- gc(reset = T); rm(list = ls())
gi <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/general_indexes/index_tabla_rbind_europa_completo.rds")
names(gi)
head(gi)
unique(gi$Variable)
hist(gi$Value[gi$Variable == "TOTRAIN"])
hist(as.numeric(gi$Value[gi$Variable == "TOTRAIN"]))
hist(as.numeric(gi$Value[gi$Variable == "CDD"]))
hist(as.numeric(gi$Value[gi$Variable == "P5D"]))
hist(as.numeric(gi$Value[gi$Variable == "P_95"]))
library(dtw)
idx<-seq(0,6.28,len=100);
query<-sin(idx)+runif(100)/10;
idx
query
plot(query)
plot(query, ty = "l")
template<-cos(idx)
plot(template, ty = "l")
library(dtw);
alignment<-dtw(query,template,keep=TRUE);
alignment
plot(alignment,type="threeway")
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
rabinerJuangStepPattern(6,"c")
plot(rabinerJuangStepPattern(6,"c"))
alignment$costMatrix
plot(alignment$costMatrix)
install.packages("parallelDist")
tmp.mat <- matrix(c(1:40), ncol = 10)
tmp.mat
sample.matrix.list <- list(tmp.mat[1:2,], tmp.mat[3:4,])
sample.matrix.list
parDist(x = sample.matrix.list, method = "dtw")
library(parallelDist)
parDist(x = sample.matrix.list, method = "dtw")
sample.matrix.list2 <- sample.matrix.list
sample.matrix.list2[[1]] <- cbind(sample.matrix.list2[[1]][1,], sample.matrix.list2[[1]][2,])
sample.matrix.list2
sample.matrix.list2 <- sample.matrix.list
as.matrix(sample.matrix.list2[[1]][1,])
as.matrix(t(sample.matrix.list2[[1]][1,]))
sample.matrix.list2[[1]] <- cbind(as.matrix(t(sample.matrix.list2[[1]][1,])), as.matrix(t(sample.matrix.list2[[1]][2,])))
sample.matrix.list2
sample.matrix.list2[[2]] <- cbind(as.matrix(t(sample.matrix.list2[[2]][1,])), as.matrix(t(sample.matrix.list2[[2]][2,])))
sample.matrix.list2
parDist(x = sample.matrix.list2, method = "dtw")
sample.matrix.list
parDist(x = sample.matrix.list, method = "dtw")
sample.matrix.list2
parDist(x = sample.matrix.list2, method = "dtw")
df <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/dist_global_index_ciat_palmira.rds")
head(df)
df <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/global_index_estandarizados_frijol.rds")
head(df)
df <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/tabla_rbind_frijol_europa.rds")
head(df)
unique(df$Variable)
library(tidyverse)
df <- df %>% filter(Variable != "Error in xj[i] : only 0's may be mixed with negative subscripts\n")
unique(df$Variable)
df2 <- df %>% filter(cellID == 287280)
names(df2)
df2 %>% spread(key = Year, value = Value, -cellID)
df2 %>% spread(key = Year, value = Value)
df2 <- df2 %>% spread(key = Year, value = Value)
df2
unique(df$cellID)
df3 <- df %>% filter(cellID == 282932)
df3 <- df3 %>% spread(key = Year, value = Value)
df3
sample.matrix.list3 <- list(df2[,3:ncol(df2)], df3[,3:ncol(df3)])
sample.matrix.list3
parDist(x = sample.matrix.list3, method = "dtw")
sample.matrix.list3 <- list(as.matrix(df2[,3:ncol(df2)]), as.matrix(df3[,3:ncol(df3)]))
parDist(x = sample.matrix.list3, method = "dtw")
sample.matrix.list3
colnames(df2) <- paste0("Y", colnames(df2))
colnames(df3) <- paste0("Y", colnames(df3))
colnames(df2)
df2 <- df %>% filter(cellID == 287280)
df2 <- df2 %>% spread(key = Year, value = Value)
df3 <- df %>% filter(cellID == 282932)
df3 <- df3 %>% spread(key = Year, value = Value)
colnames(df2)[3:ncol(df2)] <- paste0("Y", colnames(df2)[3:ncol(df2)])
colnames(df3)[3:ncol(df3)] <- paste0("Y", colnames(df3)[3:ncol(df3)])
colnames(df2)
base::as.matrix(df2[,3:ncol(df2)])
base::as.matrix.data.frame(df2[,3:ncol(df2)])
base::as.matrix.data.frame(df2[,3:ncol(df2)])
base::as.matrix.data.frame(as.numeric(df2[,3:ncol(df2)]))
as.numeric(df2[,3:ncol(df2)])
base::as.matrix(as.numeric(df2[,3:ncol(df2)]))
df2[,3:ncol(df2)]
data.matrix(df2[,3:ncol(df2)])
sample.matrix.list3 <- list(data.matrix(df2[,3:ncol(df2)]), data.matrix(df3[,3:ncol(df3)]))
parDist(x = sample.matrix.list3, method = "dtw")
install.packages(c("BH", "RcppParallel", "tmaptools"))
library(parallelDist)
getAnywhere("parDist")
?parDist
library(tidyverse)
df <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/tabla_rbind_frijol_europa.rds")
df <- df %>% filter(Variable != "Error in xj[i] : only 0's may be mixed with negative subscripts\n")
df2 <- df %>% filter(cellID == 287280)
df2 <- df2 %>% spread(key = Year, value = Value)
View(df2)
df3 <- df %>% filter(cellID == 282932)
df3 <- df3 %>% spread(key = Year, value = Value)
View(df2)
plot(as.numeric(df2[1, 3:ncol(df2)]))
plot(as.numeric(df2[1, 3:ncol(df2)]), ty = "l")
plot(as.numeric(df3[1, 3:ncol(df3)]), ty = "l", add = T)
plot(as.numeric(df2[1, 3:ncol(df2)]), ty = "l")
plot(as.numeric(df2[1, 3:ncol(df2)]), ty = "l")
lines(as.numeric(df3[1, 3:ncol(df3)]), col = 2)
colnames(df2)[3:ncol(df2)] <- paste0("Y", colnames(df2)[3:ncol(df2)])
colnames(df3)[3:ncol(df3)] <- paste0("Y", colnames(df3)[3:ncol(df3)])
sample.matrix.list3 <- list(data.matrix(df2[,3:ncol(df2)]), data.matrix(df3[,3:ncol(df3)]))
parDist(x = sample.matrix.list3, method = "dtw")
1:nrow(df2)
matrix(data = df2[1, 3:ncol(df2)], nrow = 1, byrow = T)
as.numeric(df2[i, 3:ncol(df2)])
matrix(data = as.numeric(df2[1, 3:ncol(df2)]), nrow = 1, byrow = T)
for(i in 1:nrow(df2)){
l <- list(matrix(data = as.numeric(df2[i, 3:ncol(df2)]), nrow = 1, byrow = T),
matrix(data = as.numeric(df3[i, 3:ncol(df3)]), nrow = 1, byrow = T))
print(parDist(x = l, method = "dtw"))
}
sum(c(0.08918634, 0.008196721, 11, 1, 501, 1))
parDist(x = sample.matrix.list3, method = "dtw")
gi <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/dist_global_index_ciat_palmira.rds")
head(gi)
gi <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/global_index_estandarizados_frijol.rds")
head(gi)
gi <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/tabla_rbind_frijol_europa.rds")
head(gi)
gi$Variable %>% unique()
gi <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/Crop_indexes/global_index_estandarizados_frijol_calor.rds")
head(gi)
gi <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/Crop_indexes/dist_global_index_calor_ciat_palmira.rds")
head(gi)
crop = "Bean"
crop %in% c("Bean")
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(maptools)){install.packages('maptools'); library(maptools)} else {library(maptools)})
suppressMessages(if(!require(rgdal)){install.packages('rgdal'); library(rgdal)} else {library(rgdal)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
?extract
watbal_loc <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Input_data/_soils/Water_balance/watbal_europa.rds")
plot(watbal_loc$ERATIO, ty = "l")
plot(watbal_loc$ERATIO[1:365], ty = "l")
plot(watbal_loc$ERATIO[1:(365*2)], ty = "l")
View(watbal_loc)
View(watbal_loc)
plot(watbal_loc$ERATIO, ty = "l")
summary(watbal_loc$RUNOFF)
plot(watbal_loc$RUNOFF, ty = "l")
plot(watbal_loc$PREC, ty = "l")
plot(watbal_loc$RAIN, ty = "l")
plot(watbal_loc$CUM_RAIN, ty = "l")
View(watbal_loc)
library(tidyverse)
# Load packages
suppressMessages(if(!require(raster)){install.packages('raster'); library(raster)} else {library(raster)})
suppressMessages(if(!require(ncdf4)){install.packages('ncdf4'); library(ncdf4)} else {library(ncdf4)})
suppressMessages(if(!require(tidyverse)){install.packages('tidyverse'); library(tidyverse)} else {library(tidyverse)})
suppressMessages(if(!require(parallel)){install.packages('parallel'); library(parallel)} else {library(parallel)})
suppressMessages(if(!require(googlesheets)){install.packages("googlesheets");library(googlesheets)}else{library(googlesheets)})
crop = "Bean"; ncores = 15
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials")
View(trials)
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials")
View(trials)
options(warn = -1); options(scipen = 999)
View(trials)
trials %>% glimpse()
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials")
View(trials)
?read_csv
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials", col_types = list(col_character()))
View(trials)
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials", col_types = list(rep(col_character(), 12)))
rep(col_character(), 12)
rep(1, 12)
rep(col_character(), 12)
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials", col_types = rep("c", 12))
trials <- trials %>% gs_read(ws = "Trials", col_types = "c")
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials", col_types = "c")
trials <- trials %>% gs_read(ws = "Trials")
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials")
trials$Longitude
as.character(trials$Longitude)
# Loading information from Google Drive
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials", col_types = col(Longitude = col_character(), Latitude = col_character()))
cat(">>> Loading data from Google Drive ...\n")
trials <- gs_ls("crop_information_states")
trials <- gs_title("crop_information_states")
trials %>% gs_browse(ws = "Trials")
trials <- trials %>% gs_read(ws = "Trials", col_types = cols(Longitude = col_character(),
Latitude = col_character()))
View(trials)
trials$Longitude <- gsub(pattern = ",", replacement = ".", x = trials$Longitude) %>% as.character() %>% as.numeric()
trials$Latitude <- gsub(pattern = ",", replacement = ".", x = trials$Latitude) %>% as.character() %>% as.numeric()
glimpse(trials)
trials <- trials %>% filter(Crop == crop)
trials
library(parallelDist)
tmp.mat <- matrix(c(1:40), ncol = 10)
sample.matrix.list <- list(tmp.mat[1:2,], tmp.mat[3:4,])
sample.matrix.list
parDist(x = sample.matrix.list, method = "dtw")
sample.matrix.list2 <- sample.matrix.list
sample.matrix.list2[[1]] <- cbind(as.matrix(t(sample.matrix.list2[[1]][1,])), as.matrix(t(sample.matrix.list2[[1]][2,])))
sample.matrix.list2[[2]] <- cbind(as.matrix(t(sample.matrix.list2[[2]][1,])), as.matrix(t(sample.matrix.list2[[2]][2,])))
sample.matrix.list2
parDist(x = sample.matrix.list2, method = "dtw")
# Multidimensional case with standarize
sample.matrix.list.std <- sample.matrix.list
apply(sample.matrix.list.std[[1]], MARGIN = 1, FUN = scale)
t(apply(sample.matrix.list.std[[1]], MARGIN = 1, FUN = scale))
sample.matrix.list.std[[1]] <- apply(sample.matrix.list.std[[1]], MARGIN = 1, FUN = scale)
sample.matrix.list.std[[2]] <- apply(sample.matrix.list.std[[2]], MARGIN = 1, FUN = scale)
parDist(x = sample.matrix.list.std, method = "dtw")
sample.matrix.list.std
# Multidimensional case with standarize
sample.matrix.list.std <- sample.matrix.list
sample.matrix.list.std[[1]] <- t(apply(sample.matrix.list.std[[1]], MARGIN = 1, FUN = scale))
sample.matrix.list.std[[2]] <- t(apply(sample.matrix.list.std[[2]], MARGIN = 1, FUN = scale))
sample.matrix.list.std
library(tidyverse)
df <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indexes/tabla_rbind_frijol_europa.rds")
df <- readRDS("//dapadfs/Workspace_cluster_9/CWR_pre-breeding/Results/Bean/General_indices/tabla_rbind_frijol_europa.rds")
df <- df %>% filter(Variable != "Error in xj[i] : only 0's may be mixed with negative subscripts\n")
df2 <- df %>% filter(cellID == 287280)
df2 <- df2 %>% spread(key = Year, value = Value)
df3 <- df %>% filter(cellID == 282932)
df3 <- df3 %>% spread(key = Year, value = Value)
colnames(df2)[3:ncol(df2)] <- paste0("Y", colnames(df2)[3:ncol(df2)])
colnames(df3)[3:ncol(df3)] <- paste0("Y", colnames(df3)[3:ncol(df3)])
sample.matrix.list3 <- list(data.matrix(df2[,3:ncol(df2)]), data.matrix(df3[,3:ncol(df3)]))
sample.matrix.list3
sample.matrix.list3[[1]]
t(apply(X = sample.matrix.list3[[1]], MARGIN = 1, FUN = scale))
sample.matrix.list3[[1]] <- t(apply(X = sample.matrix.list3[[1]], MARGIN = 1, FUN = scale))
sample.matrix.list3[[2]] <- t(apply(X = sample.matrix.list3[[2]], MARGIN = 1, FUN = scale))
parDist(x = sample.matrix.list3, method = "dtw")
sample.matrix.list3
sample.matrix.list3 <- list(data.matrix(df2[,3:ncol(df2)]), data.matrix(df3[,3:ncol(df3)]))
sample.matrix.list3[[2]]
parDist(x = sample.matrix.list3, method = "dtw")
for(i in 1:nrow(df2)){
l <- list(matrix(data = as.numeric(df2[i, 3:ncol(df2)]), nrow = 1, byrow = T),
matrix(data = as.numeric(df3[i, 3:ncol(df3)]), nrow = 1, byrow = T))
print(parDist(x = l, method = "dtw"))
}
sum(c(0.08918634, 0.008196721, 11, 1, 501, 1))
